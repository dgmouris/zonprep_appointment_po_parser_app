# syntax = docker/dockerfile:1.5
# Multi-stage Docker buildfile
# See https://docs.docker.com/build/guide/multi-stage/

# Stage 1: Build the python dependencies
# Include any build time OS dependencies here.
FROM python:3.11-slim-bookworm as build-python

# note pytorch is needed for easyocr.
FROM pytorch/pytorch as build-python

RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
    && apt-get update \
    # dependencies for building Python packages
    && apt-get install -y build-essential libpq-dev

COPY ./requirements /requirements
RUN --mount=type=cache,target=/root/.cache \
    # pip install \
    pip wheel --no-deps --wheel-dir /wheels \
    -r /requirements/requirements.txt \
    -r /requirements/prod-requirements.txt \
    -r /requirements/extra-ocr-requirements.txt

# Stage 2: Build the front end files
FROM node:20-bookworm-slim AS build-node
RUN nodejs -v && npm -v
WORKDIR /code
COPY *.json *.js .babelrc /code/
COPY assets /code/assets/
COPY api-client /code/api-client/

RUN npm install

# build needs everything because it needs to be able to do the tailwind class detection / purging stuff
COPY . /code
RUN npm run build

# Stage 3: Build the final image
# This copies the python dependencies from the first stage
# and the front end files from the second stage.
# Add any runtime OS dependencies here.
FROM python:3.11-slim-bookworm
ENV PYTHONUNBUFFERED 1
ENV DEBUG 0

RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    # psycopg2 dependencies
    libpq-dev \
    # Translations dependencies
    gettext \
    # easyocr deps
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgl1-mesa-dev \
    wget \
    unzip \
    # cleaning up unused files
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false

RUN addgroup --system django \
    && adduser --system --ingroup django django \
    # also create the Django media directory with appropriate permissions
    && mkdir -p /code/media \
	&& chown -R django:django /code/media \
    # also create EasyOCR directory with permissions
    && mkdir -p /code/.EasyOCR \
	&& chown -R django:django /code/.EasyOCR

# easyocr model download
# Download the file using wget
RUN wget https://github.com/JaidedAI/EasyOCR/releases/download/v1.3/english_g2.zip -P /code/

# Unzip the downloaded file
RUN unzip /code/english_g2.zip -d /code/.EasyOCR/models

# Clean up: Remove the ZIP file after extraction (optional)
RUN rm /code/english_g2.zip

# build all wheels
COPY --from=build-python /wheels /wheels
COPY ./requirements /requirements
RUN --mount=type=cache,target=/root/.cache \
    pip install \
    -r /requirements/requirements.txt \
    -r /requirements/prod-requirements.txt \
    -r /requirements/extra-ocr-requirements.txt \
    --find-links=/wheels \
    && rm -rf /wheels
    # -r /requirements/extra-ocr-requirements.txt \

WORKDIR /code


# copy the key for cloud storage to a file.
RUN --mount=type=secret,id=CLOUD_STORAGE_NAME \
--mount=type=secret,id=CLOUD_STORAGE_CREDENTIALS \
DEBUG=False \
CLOUD_STORAGE_NAME=$(cat /run/secrets/CLOUD_STORAGE_NAME) \
CLOUD_STORAGE_CREDENTIALS=$(cat /run/secrets/CLOUD_STORAGE_CREDENTIALS) \
echo $CLOUD_STORAGE_CREDENTIALS > /code/cloud-storage-secret.json

# continue on wit hthe rest of the code.
COPY --chown=django:django . /code
COPY --from=build-node /code/static /code/static

# why this has to be here:
# https://stackoverflow.com/questions/59719175/where-to-run-collectstatic-when-deploying-django-app-to-heroku-using-docker
# RUN DEBUG=False python /code/manage.py collectstatic --noinput --settings=zon_prep_ocr_project.settings_production
RUN --mount=type=secret,id=CLOUD_STORAGE_NAME \
    --mount=type=secret,id=CLOUD_STORAGE_CREDENTIALS \
    DEBUG=False \
    CLOUD_STORAGE_NAME=$(cat /run/secrets/CLOUD_STORAGE_NAME) \
    CLOUD_STORAGE_CREDENTIALS=$(cat /run/secrets/CLOUD_STORAGE_CREDENTIALS) \
    python /code/manage.py collectstatic --noinput --settings=zon_prep_ocr_project.settings_production
RUN chown django:django -R static_root

USER django

COPY --chown=django:django deploy/docker_startup.sh /start
RUN --mount=type=secret,id=CLOUD_STORAGE_NAME \
    --mount=type=secret,id=CLOUD_STORAGE_CREDENTIALS \
    CLOUD_STORAGE_NAME=$(cat /run/secrets/CLOUD_STORAGE_NAME) \
    CLOUD_STORAGE_CREDENTIALS=$(cat /run/secrets/CLOUD_STORAGE_CREDENTIALS) \
    chmod +x /start
# RUN chmod +x /start
CMD /start
